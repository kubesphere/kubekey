- name: Should defined internal_ipv4 or internal_ipv6
  assert:
    that: or (and .internal_ipv4 (ne .internal_ipv4 "")) (and .internal_ipv6 (ne .internal_ipv6 ""))
    fail_msg: |
      "internal_ipv4" and "internal_ipv6" cannot both be empty

- name: Check kubevip if valid
  run_once: true
  assert:
    that:
      - and .kubernetes.control_plane_endpoint.kube_vip.address (ne .kubernetes.control_plane_endpoint.kube_vip.address "")
      - .kubernetes.control_plane_endpoint.kube_vip.address | regexMatch "^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])|(([0-9a-fA-F]{1,4}:){7}([0-9a-fA-F]{1,4}|:)|(([0-9a-fA-F]{1,4}:){1,6}|:):([0-9a-fA-F]{1,4}|:){1,6}([0-9a-fA-F]{1,4}|:)))$"
      - |
        {{- $existIP := false }}
        {{- range .groups.all | default list }}
          {{- if eq $.kubernetes.control_plane_endpoint.kube_vip.address (index $.inventory_hosts . "internal_ipv4") }}
          {{- $existIP = true }}
          {{- end }}
        {{- end }}
        {{ not $existIP }}
    fail_msg: |
      "kubernetes.control_plane_endpoint.kube_vip.address" should be a un-used ip address.
  when: .kubernetes.control_plane_endpoint.type | eq "kube_vip"

- name: Stop if unsupported version of Kubernetes
  run_once: true
  assert:
    that: .kube_version | semverCompare (printf ">=%s" .cluster_require.kube_version_min_required)
    fail_msg: |
      the current release of KubeKey only support newer version of Kubernetes than {{ .cluster_require.kube_version_min_required }} - You are trying to apply {{ .kube_version }}
  when: and .kube_version (ne .kube_version "")

- name: Check if kubernetes installed
  when: .groups.k8s_cluster | default list | has .inventory_name
  block:
    - name: Get kubernetes service
      ignore_errors: true
      command: systemctl is-active kubelet.service
      register: kubernetes_install_service
    - name: Get kubernetes version
      ignore_errors: true
      command: kubelet --version
      register: kubernetes_install_version
    - name: Check kubernetes service and version 
      when: .kubernetes_install_service.stdout | eq "active"
      block:
        - name: Check kubernetes version
          assert:
            that: .kubernetes_install_version.stdout | default "" | trimPrefix "Kubernetes " | eq .kube_version
            fail_msg: |
              kubernetes has installed with version:{{ .kubernetes_install_version.stdout | default "" | trimPrefix "Kubernetes " }}. but not match kube_version: {{ .kube_version }}
        - name: Set_Fact kubernetes_version
          set_fact:
            kubernetes_installed: true
