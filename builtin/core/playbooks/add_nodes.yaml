---
- import_playbook: hook/pre_install.yaml

# Load default variables and perform prechecks on all hosts
- hosts:
    - all
  gather_facts: true
  roles:
    - defaults
    - precheck
    - native/root

# Download all required software and generate certificates on the localhost
- hosts:
    - localhost
  gather_facts: true
  roles:
    - certs/init
    - download

# Initialize all nodes and install necessary software packages
- hosts:
    - etcd
    - k8s_cluster
    - image_registry
    - nfs
  roles:
    - native

# Install the etcd cluster
- hosts:
    - etcd
  gather_facts: true
  roles:
    - role: etcd
      when:
        - .etcd.deployment_type | eq "external"

- hosts:
    - kube_control_plane
  tasks:
    - name: AddNodes | Check if should update apiserver certificates
      run_once: true
      add_hostvars:
        hosts: kube_control_plane
        vars:
          need_installed_etcd: >-
            {{- $needInstalled := list -}}
            {{- range .groups.etcd -}}
              {{- if and ((index $.hostvars . "etcd_install_LoadState" "stdout") | eq "not-found") ($.delete_nodes | default list | has . | not) -}}
                {{- $needInstalled = append $needInstalled . -}}
              {{- end -}}
            {{- end -}}
            {{ $needInstalled | toJson }} 
    - name: DeleteNode | Update apiserver etcd certificates
      when:
        - .need_installed_etcd | fromJson | empty | not
        - .etcd.deployment_type | eq "external"
      block:
        - name: PreKubernetes | Copy CA certificate to control plane node
          copy: 
            src: >-
              {{ .kubernetes.certs.ca_cert }}
            dest: /etc/kubernetes/pki/ca.crt
        - name: PreKubernetes | Copy CA private key to control plane node
          copy:
            src: >-
              {{ .kubernetes.certs.ca_key }}
            dest: /etc/kubernetes/pki/ca.key
        - name: PreKubernetes | update ks-apiserver
          command: |
            {{- $endpoints := list -}}
            {{- range .groups.etcd | default list -}}
              {{- $endpoints = append $endpoints (printf "https://%s:2379" (index $.hostvars . "internal_ipv4")) -}}
            {{- end -}}
            ETCD_ENDPOINTS="{{ join "," $endpoints }}"
                
            if [ ! -f /etc/kubernetes/kubeadm-config.yaml ]; then
              kubectl get cm kubeadm-config -n kube-system -o=jsonpath='{.data.ClusterConfiguration}' > /etc/kubernetes/kubeadm-config.yaml
            fi
        
            awk -v ep="$ETCD_ENDPOINTS" '
              BEGIN {
                n = split(ep, arr, ",")
                print "    endpoints:"
                for (i = 1; i <= n; i++) {
                  print "      - " arr[i]
                }
              }
            ' > /tmp/new_endpoints.yaml
        
            sed -i "/endpoints:/,/^ *[^ -]/d" /etc/kubernetes/kubeadm-config.yaml
        
            awk '
              {print}
              /^ *external:/ {
                while ((getline line < "/tmp/new_endpoints.yaml") > 0) print line
                close("/tmp/new_endpoints.yaml")
              }
            ' /etc/kubernetes/kubeadm-config.yaml > /etc/kubernetes/kubeadm-config.yaml.tmp
        
            mv /etc/kubernetes/kubeadm-config.yaml.tmp /etc/kubernetes/kubeadm-config.yaml
        
            kubeadm config upload from-file --config=/etc/kubernetes/kubeadm-config.yaml
            kubeadm init phase control-plane apiserver --config=/etc/kubernetes/kubeadm-config.yaml

- hosts:
    - k8s_cluster
  roles:
    - role: cri
      when: or (.add_nodes | default list | empty) (.add_nodes | default list | has .inventory_hostname)
    - role: kubernetes/init-kubernetes
      when: or (.add_nodes | default list | empty) (.add_nodes | default list | has .inventory_hostname)
    - role: kubernetes/pre-kubernetes
      when: or (.add_nodes | default list | empty) (.add_nodes | default list | has .inventory_hostname) 
    - role: kubernetes/join-kubernetes
      when: or (.add_nodes | default list | empty) (.add_nodes | default list | has .inventory_hostname)
    - role: kubernetes/certs
      when: 
        - or (.add_nodes | default list | empty) (.add_nodes | default list | has .inventory_hostname)
        - .groups.kube_control_plane | default list | has .inventory_hostname
        - .kubernetes.certs.renew  
