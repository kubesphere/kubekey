---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: Reconcile
  name: system:coredns
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch

---
apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    addonmanager.kubernetes.io/mode: Reconcile
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
    createdby: 'kubekey'
spec:
  clusterIP: {{ kubernetes.networking.dns_service_ip }}
  selector:
    k8s-app: kube-dns
  ports:
    - name: dns
      port: 53
      protocol: UDP
    - name: dns-tcp
      port: 53
      protocol: TCP
    - name: metrics
      port: 9153
      protocol: TCP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "coredns"
  namespace: kube-system
  labels:
    k8s-app: "kube-dns"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "coredns"
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 10%
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
      annotations:
        createdby: 'kubekey'
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      priorityClassName: system-cluster-critical
      serviceAccountName: coredns
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  k8s-app: kube-dns
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: In
                values:
                - ""
      containers:
      - name: coredns
        image: "{{ kubernetes.networking.dns_image }}"
        imagePullPolicy: IfNotPresent
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 70Mi
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
      dnsPolicy: Default
      volumes:
        - name: config-volume
          configMap:
            name: coredns

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
      addonmanager.kubernetes.io/mode: EnsureExists
data:
  Corefile: |
{% for ez in kubernetes.coredns.zone_configs %}
    {{ ez.zones|join:"   " }} {
      cache {{ ez.cache }}
{% for c in ez.additional_configs %}
      {{ c }}
{% endfor %}

{% for r in ez.rewrite %}
      rewrite {{ r.rule }} {
        {{ r.field }} {{ r.type }} {{ r.value }}
        {{ r.options }}
      }
{% endfor %}

      health {
        lameduck 5s
      }

{% if (ez.kubernetes.zones|defined) %}
      kubernetes {{ ez.kubernetes.zones|join:" " }} in-addr.arpa ip6.arpa {
        pods insecure
        fallthrough in-addr.arpa ip6.arpa
        ttl 30
      }
{% endif %}

{% for f in ez.forward %}
      forward {{ f.from }} {{ f.to|join:" " }} {
{% if (f.except|length > 0)  %}        except {{ f.except|join:" " }}{% endif %}
{% if (f.force_tcp) %}        force_tcp{% endif %}
{% if (f.prefer_udp) %}        prefer_udp{% endif %}
{% if (f.max_fails|defined) %}        max_fails {{ f.max_fails }}{% endif %}
{% if (f.expire|defined) %}        expire {{ f.expire }}{% endif %}
{% if (f.tls|defined) %}        tls {{ f.tls.cert_file }} {{ f.tls.key_file }} {{ f.tls.ca_file }}{% endif %}
{% if (f.tls_servername|defined) %}        tls_servername {{ f.tls_servername }}{% endif %}
{% if (f.policy|defined) %}        policy {{ f.policy }}{% endif %}
{% if (f.health_check|defined) %}        health_check {{ f.health_check }}{% endif %}
{% if (f.max_concurrent|defined) %}        max_concurrent {{ f.max_concurrent }}{% endif %}
      }
{% endfor %}

{% if (kubernetes.coredns.dns_etc_hosts|length > 0) %}
      hosts /etc/coredns/hosts {
        allthrough
      }
{% endif %}
    }
{% endfor %}

{% if (kubernetes.coredns.dns_etc_hosts|length > 0) %}
  hosts: |
{% for h in kubernetes.coredns.dns_etc_hosts %}
    {{ h }}
{% endfor %}
{% endif %}
