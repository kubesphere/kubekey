---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: Reconcile
  name: system:coredns
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch

---
apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "CoreDNS"
    addonmanager.kubernetes.io/mode: Reconcile
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
    createdby: 'kubekey'
spec:
  clusterIP: {{ .kubernetes.networking.dns_service_ip }}
  selector:
    k8s-app: kube-dns
  ports:
    - name: dns
      port: 53
      protocol: UDP
    - name: dns-tcp
      port: 53
      protocol: TCP
    - name: metrics
      port: 9153
      protocol: TCP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "coredns"
  namespace: kube-system
  labels:
    k8s-app: "kube-dns"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "coredns"
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 10%
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
      annotations:
        createdby: 'kubekey'
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      priorityClassName: system-cluster-critical
      serviceAccountName: coredns
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  k8s-app: kube-dns
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: In
                values:
                - ""
      containers:
      - name: coredns
        image: "{{ .kubernetes.networking.dns_image }}"
        imagePullPolicy: IfNotPresent
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 70Mi
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
      dnsPolicy: Default
      volumes:
        - name: config-volume
          configMap:
            name: coredns

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
      addonmanager.kubernetes.io/mode: EnsureExists
data:
  Corefile: |
  {{- range $ez := .kubernetes.coredns.zone_configs }}
    {{ (index $ez "zones") | join " " }} {
      cache {{ index $ez "cache" }}
    {{- range $c := (index $ez "additional_configs") }}
      {{ $c }}
    {{- end }}

    {{- range $r := (index $ez "rewrite") }}
      rewrite {{ index $r "rule" }} {
        {{ index $r "field" }} {{ index $r "type" }} {{ index $r "value" }}
        {{ index $r "options" }}
      }
    {{- end }}

      health {
        lameduck 5s
      }

    {{- if (index $ez "kubernetes" "zones") | len | lt 0 }}
      kubernetes {{ (index $ez "kubernetes" "zones") | join " " }} in-addr.arpa ip6.arpa {
        pods insecure
        fallthrough in-addr.arpa ip6.arpa
        ttl 30
      }
    {{- end }}

    {{- range $f := (index $ez "forward") }}
      forward {{ index $f "from" }} {{ (index $f "to") | join " " }} {
      {{- if (index $f "except") | len | lt 0 }}
        except {{ index $f "except" | join " " }}
      {{- end }}
      {{- if index $f "force_tcp" }}
        force_tcp
      {{- end }}
      {{- if index $f "prefer_udp" }}
        prefer_udp
      {{- end }}
      {{- if index $f "max_fails" }}
        max_fails {{ index $f "max_fails" }}
      {{- end }}
      {{- if index $f "expire" }}
        expire {{ index $f "expire" }}
      {{- end }}
      {{- if index $f "tls" }}
        tls {{ index $f "tls" "cert_file" }} {{ index $f "tls" "key_file" }} {{ index $f "tls" "ca_file" }}
      {{- end }}
      {{- if index $f "tls_servername" }}
        tls_servername {{ index $f "tls_servername" }}
      {{- end }}
      {{- if index $f "policy" }}
        policy {{ index $f "policy" }}
      {{- end }}
      {{- if index $f "health_check" }}
        health_check {{ index $f "health_check" }}
      {{- end }}
      {{- if index $f "max_concurrent" }}
        max_concurrent {{ index $f "max_concurrent" }}
      {{- end }}
      }
    {{- end }}

    {{- if .kubernetes.coredns.dns_etc_hosts | len | lt 0) }}
      hosts /etc/coredns/hosts {
        fallthrough
      }
    {{- end }}
    }
  {{- end }}

{{- if .kubernetes.coredns.dns_etc_hosts | len | lt 0) }}
  hosts: |
  {{- range $h := .kubernetes.coredns.dns_etc_hosts }}
    {{ $h }}
  {{- end }}
{{- end }}
